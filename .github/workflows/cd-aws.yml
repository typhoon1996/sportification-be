# =============================================================================
# CD Pipeline - Continuous Deployment to AWS ECS
# =============================================================================
# This workflow deploys to AWS ECS across dev, test, and production environments
# - Builds and pushes Docker images to ECR
# - Updates ECS task definitions
# - Deploys to ECS with zero-downtime
# - Supports manual approval for production
# =============================================================================

name: CD - Deploy to AWS

on:
  push:
    branches:
      - develop # Auto-deploy to dev
      - staging # Auto-deploy to test/staging
      - main # Deploy to production (with approval)
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - dev
          - test
          - prod

# Prevent concurrent deployments to same environment
concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sportification-api
  ECS_CLUSTER: sportification-cluster
  NODE_VERSION: "18"

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Determine Deployment Environment
  # ---------------------------------------------------------------------------
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deploy: ${{ steps.set-env.outputs.deploy }}

    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Display deployment info
        run: |
          echo "## Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ steps.set-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # Job 2: Build & Push Docker Image
  # ---------------------------------------------------------------------------
  build:
    name: Build & Push to ECR
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.deploy == 'true'
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Deploy
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata for Docker
        id: meta
        run: |
          ENV=${{ needs.setup.outputs.environment }}
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          echo "tags=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${ENV}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "latest-tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${ENV}-latest" >> $GITHUB_OUTPUT
          echo "timestamp-tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${ENV}-${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.meta.outputs.latest-tag }}
            ${{ steps.meta.outputs.timestamp-tag }}
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Output image details
        run: |
          echo "image=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
          echo "## Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "Registry: ${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # Job 3: Deploy to Development
  # ---------------------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'dev'
    environment:
      name: development
      url: https://dev-api.sportification.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          aws secretsmanager get-secret-value \
            --secret-id sportification/dev/app \
            --query SecretString --output text > .env.dev.json

      - name: Fill in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/ecs/task-definition-dev.json
          container-name: sportification-api
          image: ${{ needs.build.outputs.image }}
          environment-variables: |
            NODE_ENV=development
            PORT=3000

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sportification-api-dev
          cluster: ${{ env.ECS_CLUSTER }}-dev
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Verify deployment
        run: |
          echo "Waiting for health check..."
          sleep 30
          curl -f https://dev-api.sportification.com/health || exit 1

      - name: Deployment summary
        run: |
          echo "## ✅ Deployed to Development" >> $GITHUB_STEP_SUMMARY
          echo "Environment: development" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: https://dev-api.sportification.com" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # Job 4: Deploy to Test/Staging
  # ---------------------------------------------------------------------------
  deploy-test:
    name: Deploy to Test/Staging
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'test'
    environment:
      name: staging
      url: https://staging-api.sportification.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          aws secretsmanager get-secret-value \
            --secret-id sportification/test/app \
            --query SecretString --output text > .env.test.json

      - name: Fill in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/ecs/task-definition-test.json
          container-name: sportification-api
          image: ${{ needs.build.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sportification-api-test
          cluster: ${{ env.ECS_CLUSTER }}-test
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          sleep 30
          curl -f https://staging-api.sportification.com/health || exit 1
          # Add more smoke tests here

      - name: Deployment summary
        run: |
          echo "## ✅ Deployed to Staging" >> $GITHUB_STEP_SUMMARY
          echo "Environment: staging" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: https://staging-api.sportification.com" >> $GITHUB_STEP_SUMMARY

  # ---------------------------------------------------------------------------
  # Job 5: Deploy to Production (with approval)
  # ---------------------------------------------------------------------------
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'prod'
    environment:
      name: production
      url: https://api.sportification.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch secrets from AWS Secrets Manager
        run: |
          aws secretsmanager get-secret-value \
            --secret-id sportification/prod/app \
            --query SecretString --output text > .env.prod.json

      - name: Create backup task definition
        run: |
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }}-prod \
            --services sportification-api-prod \
            --query 'services[0].taskDefinition' \
            --output text > backup-task-def.txt

      - name: Fill in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/ecs/task-definition-prod.json
          container-name: sportification-api
          image: ${{ needs.build.outputs.image }}

      - name: Deploy to ECS (Blue/Green)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sportification-api-prod
          cluster: ${{ env.ECS_CLUSTER }}-prod
          wait-for-service-stability: true
          wait-for-minutes: 15
          codedeploy-appspec: aws/ecs/appspec-prod.json
          codedeploy-application: sportification-prod
          codedeploy-deployment-group: sportification-prod-dg

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          sleep 60

          # Health check
          curl -f https://api.sportification.com/health || exit 1

          # API version check
          curl -f https://api.sportification.com/api/v1/health || exit 1

          echo "✅ All smoke tests passed"

      - name: Notify deployment success
        if: success()
        run: |
          # Send Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚀 Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Production Deployment Successful*\n*Image:* `${{ needs.build.outputs.image }}`\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }'

      - name: Rollback on failure
        if: failure()
        run: |
          echo "⚠️ Deployment failed, initiating rollback..."
          BACKUP_TASK_DEF=$(cat backup-task-def.txt)

          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-prod \
            --service sportification-api-prod \
            --task-definition $BACKUP_TASK_DEF \
            --force-new-deployment

      - name: Notify deployment failure
        if: failure()
        run: |
          # Send Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "❌ Production Deployment Failed - Rollback Initiated",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Production Deployment Failed*\n*Image:* `${{ needs.build.outputs.image }}`\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}\n*Rollback:* Initiated"
                  }
                }
              ]
            }'

      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "## ✅ Deployed to Production" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: https://api.sportification.com" >> $GITHUB_STEP_SUMMARY
