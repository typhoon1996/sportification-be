# =============================================================================
# CI/CD Pipeline - Continuous Integration & Testing
# =============================================================================
# This workflow runs on every push and pull request to validate code quality
# - Linting and code formatting
# - Unit tests with coverage
# - Integration tests
# - Security scanning
# - Build validation
# =============================================================================

name: CI - Test & Validate

on:
    push:
        branches:
            - main
            - develop
            - "feature/**"
            - "hotfix/**"
    pull_request:
        branches:
            - main
            - develop
    workflow_dispatch:

# Cancel in-progress runs for same PR/branch
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    NODE_VERSION: "18"
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    # ---------------------------------------------------------------------------
    # Job 1: Code Quality & Linting
    # ---------------------------------------------------------------------------
    lint:
        name: Lint & Format Check
        runs-on: ${{ matrix.os }}
        timeout-minutes: 10

        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Check code formatting
              run: npm run format:check

            - name: TypeScript type check
              run: npx tsc --noEmit

    # ---------------------------------------------------------------------------
    # Job 2: Security Scanning
    # ---------------------------------------------------------------------------
    security:
        name: Security Scan
        runs-on: ubuntu-latest
        timeout-minutes: 15

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run npm audit
              run: npm audit --audit-level=moderate
              continue-on-error: true

            - name: Run Snyk security scan
              uses: snyk/actions/node@master
              continue-on-error: true
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy results to GitHub Security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # ---------------------------------------------------------------------------
    # Job 3: Unit Tests
    # ---------------------------------------------------------------------------
    test:
        name: Unit Tests
        runs-on: ${{ matrix.os }}
        timeout-minutes: 15

        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                node-version: [18, 20]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run unit tests with coverage
              run: npm run test:coverage
              env:
                  NODE_ENV: test

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-${{ matrix.os }}-${{ matrix.node-version }}

            - name: Archive test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
                  path: |
                      coverage/
                      test-results/
                  retention-days: 30

    # ---------------------------------------------------------------------------
    # Job 4: Integration Tests
    # ---------------------------------------------------------------------------
    integration:
        name: Integration Tests
        runs-on: ubuntu-latest
        timeout-minutes: 20

        services:
            mongodb:
                image: mongo:7.0
                ports:
                    - 27017:27017
                env:
                    MONGO_INITDB_ROOT_USERNAME: admin
                    MONGO_INITDB_ROOT_PASSWORD: testpass123
                    MONGO_INITDB_DATABASE: sportification_test
                options: >-
                    --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            redis:
                image: redis:7.2-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Wait for services
              run: |
                  timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
                  timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

            - name: Run integration tests
              run: npm test -- --testPathPattern=integration
              env:
                  NODE_ENV: test
                  MONGODB_URI: mongodb://admin:testpass123@localhost:27017/sportification_test?authSource=admin
                  REDIS_URL: redis://localhost:6379
                  JWT_SECRET: test-jwt-secret
                  JWT_REFRESH_SECRET: test-refresh-secret

            - name: Upload integration test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: integration-test-results
                  path: test-results/
                  retention-days: 30

    # ---------------------------------------------------------------------------
    # Job 5: Build & Validate Docker Image
    # ---------------------------------------------------------------------------
    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: [lint, test]
        timeout-minutes: 20

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image (test build)
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  target: production
                  push: false
                  tags: ${{ env.IMAGE_NAME }}:test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      NODE_ENV=production

            - name: Scan Docker image with Trivy
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.IMAGE_NAME }}:test
                  format: "sarif"
                  output: "trivy-image-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy image scan results
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-image-results.sarif"

    # ---------------------------------------------------------------------------
    # Job 6: Test Report & Summary
    # ---------------------------------------------------------------------------
    report:
        name: Generate Test Report
        runs-on: ubuntu-latest
        needs: [lint, security, test, integration, build]
        if: always()

        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4

            - name: Publish test summary
              run: |
                  echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "âœ… All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
                  echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Integration: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
