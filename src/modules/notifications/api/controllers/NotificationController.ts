import { Response } from 'express';
import { NotificationService } from '../../domain/services/NotificationService';
import { sendSuccess, asyncHandler } from '../../../../shared/middleware/errorHandler';
import { AuthRequest } from '../../../../shared/middleware/auth';

/**
 * NotificationController - Handles user notification management HTTP requests
 * 
 * This controller manages user notifications including retrieval, read status updates,
 * and deletion. Notifications are generated by various system events (matches, friends,
 * messages, etc.) and delivered to users through this API and WebSocket connections.
 * 
 * Features:
 * - Notification retrieval with unread count
 * - Mark individual/all notifications as read
 * - Notification deletion
 * - Real-time push via WebSocket (handled separately)
 * 
 * @class NotificationController
 */
export class NotificationController {
  private notificationService: NotificationService;

  /**
   * Initializes the NotificationController with required services
   * Creates a new instance of NotificationService for handling notification operations
   */
  constructor() {
    this.notificationService = new NotificationService();
  }

  /**
   * Helper method to extract and validate user ID from authenticated request
   * 
   * @private
   * @param {AuthRequest} req - Authenticated request object
   * @returns {string} User ID from the authenticated request
   * @throws {Error} If user is not authenticated
   */
  private getUserId(req: AuthRequest): string {
    if (!req.userId) {
      throw new Error('User not authenticated');
    }
    return req.userId;
  }

  /**
   * Get user's notifications
   * 
   * Retrieves all notifications for the authenticated user, sorted by most recent first.
   * Includes unread notification count for badge display. Supports optional filtering
   * for unread notifications only via query parameter.
   * 
   * @async
   * @param {AuthRequest} req - Authenticated request
   * @param {Response} res - Express response object
   * @returns {Promise<void>} 200 OK with notifications list and unread count
   * 
   * @requires Authentication - User must be authenticated
   * 
   * Query Parameters:
   * - limit: Number of notifications to retrieve (default: 50)
   * - unreadOnly: Boolean to filter only unread notifications
   * 
   * @example
   * GET /api/v1/notifications?limit=20&unreadOnly=true
   * Headers: { Authorization: "Bearer <access-token>" }
   * 
   * Response: {
   *   notifications: [...],
   *   unreadCount: 5
   * }
   */
  getNotifications = asyncHandler(async (req: AuthRequest, res: Response) => {
    const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;
    const userId = this.getUserId(req);

    const notifications = await this.notificationService.getUserNotifications(userId, limit);

    const unreadCount = await this.notificationService.getUnreadCount(userId);

    sendSuccess(res, {
      notifications,
      unreadCount,
    });
  });

  /**
   * Get notification by ID
   * 
   * Retrieves a specific notification and automatically marks it as read.
   * This is useful when a user clicks on a notification to view its details.
   * 
   * Side Effect: Marks the notification as read
   * 
   * @async
   * @param {AuthRequest} req - Authenticated request with notification ID parameter
   * @param {Response} res - Express response object
   * @returns {Promise<void>} 200 OK with notification details
   * 
   * @requires Authentication - User must be authenticated and own the notification
   * 
   * @throws {NotFoundError} If notification doesn't exist or doesn't belong to user
   * 
   * @example
   * GET /api/v1/notifications/507f1f77bcf86cd799439011
   * Headers: { Authorization: "Bearer <access-token>" }
   */
  getNotificationById = asyncHandler(async (req: AuthRequest, res: Response) => {
    const userId = this.getUserId(req);
    const notification = await this.notificationService.markAsRead(req.params.id as string, userId);

    sendSuccess(res, { notification });
  });

  /**
   * Mark notification as read
   * 
   * Updates a specific notification's read status to true. This is typically
   * called when a user views or dismisses a notification. The notification
   * will no longer appear in the unread count.
   * 
   * @async
   * @param {AuthRequest} req - Authenticated request with notification ID parameter
   * @param {Response} res - Express response object
   * @returns {Promise<void>} 200 OK with updated notification
   * 
   * @requires Authentication - User must be authenticated and own the notification
   * 
   * @throws {NotFoundError} If notification doesn't exist or doesn't belong to user
   * 
   * @example
   * PUT /api/v1/notifications/507f1f77bcf86cd799439011/read
   * Headers: { Authorization: "Bearer <access-token>" }
   */
  markAsRead = asyncHandler(async (req: AuthRequest, res: Response) => {
    const userId = this.getUserId(req);
    const notification = await this.notificationService.markAsRead(req.params.id as string, userId);

    sendSuccess(res, { notification }, 'Notification marked as read');
  });

  /**
   * Mark all notifications as read
   * 
   * Bulk operation to mark all of the user's notifications as read.
   * This is typically used for a "mark all as read" button in the UI.
   * After this operation, the unread count will be zero.
   * 
   * @async
   * @param {AuthRequest} req - Authenticated request
   * @param {Response} res - Express response object
   * @returns {Promise<void>} 200 OK with success message
   * 
   * @requires Authentication - User must be authenticated
   * 
   * @example
   * PUT /api/v1/notifications/read-all
   * Headers: { Authorization: "Bearer <access-token>" }
   */
  markAllAsRead = asyncHandler(async (req: AuthRequest, res: Response) => {
    const userId = this.getUserId(req);
    await this.notificationService.markAllAsRead(userId);

    sendSuccess(res, null, 'All notifications marked as read');
  });

  /**
   * Delete notification
   * 
   * Permanently removes a notification from the user's notification list.
   * This is different from marking as read - the notification will no longer
   * be retrievable. Only the notification owner can delete their notifications.
   * 
   * @async
   * @param {AuthRequest} req - Authenticated request with notification ID parameter
   * @param {Response} res - Express response object
   * @returns {Promise<void>} 200 OK with success message
   * 
   * @requires Authentication - User must be authenticated and own the notification
   * 
   * @throws {NotFoundError} If notification doesn't exist or doesn't belong to user
   * 
   * @example
   * DELETE /api/v1/notifications/507f1f77bcf86cd799439011
   * Headers: { Authorization: "Bearer <access-token>" }
   */
  deleteNotification = asyncHandler(async (req: AuthRequest, res: Response) => {
    const { id } = req.params;
    
    if (!id) {
      const { ValidationError } = await import('../../../../shared/middleware/errorHandler');
      throw new ValidationError('Notification ID is required');
    }
    
    const userId = this.getUserId(req);

    const notification = await this.notificationService.deleteNotification(id, userId);

    if (!notification) {
      const { NotFoundError } = await import('../../../../shared/middleware/errorHandler');
      throw new NotFoundError('Notification');
    }

    sendSuccess(res, null, 'Notification deleted successfully');
  });
}

/**
 * Singleton instance of NotificationController
 * Exported for use in route definitions
 * @const {NotificationController}
 */
export const notificationController = new NotificationController();
